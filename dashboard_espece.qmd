---
params:
  sp_name: "Amaryllis"
title: "Fiche espÃ¨ce"
format:
  dashboard:
    scrolling: false
    nav-buttons:
      - icon: github
        href: https://github.com/maelpretet/fiche_espece
      - icon: arrow-bar-left
        href: ../programs/accueil.html
    embed-resources: true
execute:
  echo: false
  message : false
  warning : false
  error : false
---

```{r}
# Variables constantes
sp_name = params$sp_name
source("fonctions/var.R")
```

# `{r} params$sp_name` {orientation="columns"}

```{r}
# Librairies
source("fonctions/library.R")
```

```{r}
# Fonctions et environnement
readRenviron(".env")
source("fonctions/carte.R")
source("fonctions/function_graphics.R")
source("fonctions/function_import_from_mosaic.R")
# CrÃ©ation des data frame
source("fonctions/create_df_all_sp.R")
source("fonctions/create_df_one_sp.R")
```

## Row 1

::: {.valuebox icon="database" color="#52ad6b"}
DonnÃ©es cumulÃ©es depuis 2019 ðŸ¦‹
:::


```{r}
file_img = paste0("data/img/logo_obj_ope_papillons.png")
image_read(file_img)
```

## Photo

```{r}
file_img = paste0("data/photos/", sp_name, ".jpg")
image_read(file_img)
```

# Par annÃ©es

## Valuebox

::: {.valuebox icon="eye" color="#ced600"}
Nombre de fois oÃ¹ au moins un individu a Ã©tÃ© observÃ© :

`{r} nb_obs_idv`
:::

::: {.valuebox icon="eye-fill" color="#5bbdd6"}
Nombre total d'individus observÃ©s :

`{r} nb_idv_cpt`
:::

## Graphiques

### Abondance totale {.tabset}

```{r}
#| title: Semaine

div_obs = max((df_sp %>% group_by(an_sem) %>% summarise(n = sum(abondance)))$n) /
  max(df_nb_obs_date$n)

histo_line(df_histo = df_sp %>% 
             mutate(date = as.Date(date_collection)) %>%
             group_by(date) %>%
             summarise(sum_ab = sum(abondance)),
           df_ligne = df_nb_obs_date, div = div_obs)
```

```{r}
#| title: Box

datemin = min(as.Date(df_sp$date_collection)) - 7
datemax = max(as.Date(df_sp$date_collection)) + 7

gg1 <- gg_histo(df_histo = df_sp %>% 
      mutate(date = as.Date(date_collection)) %>%
      group_by(date) %>%
      summarise(sum_ab = sum(abondance)),
      dmin = datemin, dmax = datemax)

gg2 <- gg_line(df_line = df_nb_obs_date, dmin = datemin, dmax = datemax)

grid.arrange(gg1, gg2, ncol = 1, heights=c(2, 1))

```


```{r}
#| title: Mois

div_obs = max((df_sp %>%
                 mutate(date_mois = strftime(as.Date(date_collection), "%G-%m")) %>%
                 group_by(date_mois) %>%
                 summarise(n = sum(abondance)))$n) /
  max(df_nb_obs_mois$n)

histo_line(df_histo = df_sp %>%
             mutate(date_mois = strftime(as.Date(date_collection), "%G-%m")) %>%
             group_by(date_mois) %>% summarise(sum_ab = sum(abondance)) %>%
             mutate(date_mois = as.Date(paste0(date_mois, "-01"))),
           x_h = "date_mois", x_l = "date_mois",
           df_ligne = df_nb_obs_mois, div = div_obs)
```

### Indicateurs relatifs {.tabset}

```{r}
#| title: Abondance relative

aes_echarts(plot_e = df_ab_rel %>%
              e_charts(num_semaine) %>%
              e_line(sum_ab_rel, symbol='none'),
            xlab = "Semaine de collection",
            ylab = "Indice d'abondance",
            title = "Indice d'abondance par semaine selon les annÃ©es",
            line_color = year_colors)
```

```{r}
#| title: FrÃ©quence relative

aes_echarts(plot_e = df_freq_rel %>%
              e_charts(num_semaine) %>%
              e_line(freq_rel, symbol='none'),
            xlab = "Semaine de collection",
            ylab = "FrÃ©quence relative",
            title = "FrÃ©quence relative par semaine selon les annÃ©es",
            line_color = year_colors)
```

```{r}
#| title: Slider

# Graphique avec slider en ggplot
gg = df_ab_rel %>%
  ggplot() +
    geom_smooth(aes(x=num_semaine, y = sum_ab, frame = annee),
              color = 'purple', method = "gam") +
    xlab("Semaine de collection") +
    ylab("Abondance totale") +
    theme_cowplot()
  
ggplotly(gg) %>%
  animation_opts(transition = 0)
```

# RÃ©partition {orientation="columns"}

```{r}
gg = df_repartition %>%
  ggplot() +
    geom_bar(mapping = aes(x = nom_espece, y = rel_ab, fill = nom_espece,
                           text = paste0(nom_espece, " : ",
                                         scales::percent(rel_ab, accuracy = 0.01))),
             stat = "identity") +
    scale_x_discrete(limits=df_repartition$nom_espece) +
    ylab("% d'abondance") +
    theme_cowplot() +
    theme(axis.title.y = element_blank(),
          legend.position = "none" ) +
    scale_fill_manual(breaks = df_repartition$nom_espece,
                      values = df_repartition$couleur) +
    scale_y_continuous(labels = scales::percent_format(accuracy = 1)) + 
  coord_flip()

ggplotly(gg, tooltip = "text")
```



```{r}
ggplot(df_gregarite) +
    geom_bar(aes(x = class_idv, y = freq_prc),
             stat = "identity",
             fill = "#8cb6ec") +
  scale_x_discrete(limits=c("1", "2 Ã  4", "5 Ã  9", "10 et +")) +
  theme_cowplot() + 
  labs(x = "Nombre d'individus observÃ©s simultanÃ©ment",
       y = "% d'observations") +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1))

```

# Jardins {orientation="columns"}

## Types de jardin

### Boxplot

::: panel-tabset
```{r}
#| results: asis
#| fig-width: 6
#| fig-height: 4
for(i in 1:3) {
  cat(sprintf(paste0("\n\n#### ",lst_param[[i]][[4]],"\n\n")))
  
  print(df_sp %>%
    filter(abondance != 0) %>%
    ggplot() +
    geom_boxplot(aes(x = distance_prairie, y = abondance), color = lst_param[[i]][[2]]) +
    scale_x_discrete(limits=cat_jard) +
    xlab(lst_param[[i]][[3]]) +
    ylab("Abondance\n(jardins avec espÃ¨ce observÃ©e)") +
    theme_cowplot())

}
```
:::

### Histogramme

::: panel-tabset
```{r}
#| results: asis
#| fig-width: 6
#| fig-height: 4
for(i in 1:3) {
  cat(sprintf(paste0("\n\n#### ",lst_param[[i]][[4]],"\n\n")))
  
  df_tot = df_sp %>%
    group_by(!!sym(lst_param[[i]][[1]])) %>%
    summarise(ntot = n()) %>%
    as.data.frame()
  
  df_obs = df_sp %>%
    filter(abondance != 0) %>%
    group_by(!!sym(lst_param[[i]][[1]])) %>%
    summarise(nobs = n()) %>%
    as.data.frame()
  
  if (length(setdiff(df_tot[,lst_param[[i]][[1]]],
                     df_obs[,lst_param[[i]][[1]]] )) != 0) {
    df_add = data.frame(distance = setdiff(df_tot[,lst_param[[i]][[1]]],
                                           df_obs[,lst_param[[i]][[1]]] ),
                        nobs = 0)
    names(df_add)[1] = lst_param[[i]][[1]]
    df_obs = rbind(df_obs, df_add)
  }
  
  df_obs = df_obs %>%
      mutate(nperc = nobs/df_tot$ntot) %>%
      as.data.frame()
  
  print(df_obs %>%
    ggplot() +
      geom_bar(aes(x = !!sym(lst_param[[i]][[1]]), y = nperc,
                   fill = !!sym(lst_param[[i]][[1]]) ),
               stat = 'identity', show.legend = FALSE) +
      scale_x_discrete(limits=cat_jard) +
      scale_fill_manual(values = lst_param[[i]][[2]], breaks = cat_jard)+
      scale_y_continuous(labels = scales::percent_format(accuracy = 0.1)) +
      xlab(lst_param[[i]][[3]]) +
      ylab(paste0("% d'observations de l'individu/\n",
                  "dans la catÃ©gorie de lieu")) +
      theme_cowplot())
  
}
```
:::

## Carte + valuebox

### Cartes des jardins {.tabset}

```{r}
#| title: Position des jardins

ggplot(france) + 
    geom_sf(fill = "#f4f4f4") +
    geom_point(data = df_jardin_point, aes(x = longitude, y = latitude, color=PrÃ©sence)) +
    theme_light() 

```

```{r}
#| title: Barycentre

a = sort(c(sp_name, "Jardins"))
b = c("#d50404", "#d50404")
b[which(a == "Jardins")] = "#0baaff"

gg =ggplot(france) +
  geom_sf(fill = "#f0f0f0", color = "#a0a0a0") +
  geom_point(data = rbind(df_bary_one_sp, df_bary_base),
             aes(x = longitude, y=latitude, color = nom_espece, frame = annee)) +
  scale_color_manual(values = b) +
  theme_minimal()

gg %>%
  ggplotly()  %>%
  animation_opts(transition = 0, frame = 1000)

```


```{r}
#| title: All.sp.bary

legende = sort(c(unique(df_bary_all_sp$nom_esp_min), "Jardins"))
col_leg = rep("#5F5F5F", length(legende))
col_leg[which(legende == "Jardins")] = "#0baaff"
col_leg[which(legende == sp_name)] = "#d50404"

gg = ggplot(france) +
  geom_sf(fill = "#f0f0f0", color = "#a0a0a0") +
  geom_point(data = rbind(df_bary_all_sp, (df_bary_base %>% mutate(nom_esp_min = "Jardins")) ),
             aes(x = longitude, y = latitude, color = nom_esp_min, frame = annee,
                 text = paste0(nom_espece),
                 customdata = paste0("../out/dashboard_espece_", nom_espece, ".html"))) +
  geom_point(data = df_bary_one_sp,
             aes(x = longitude, y=latitude, frame = annee,
                 text = paste0(nom_espece),
                 customdata = paste0("https://petite-loutre.com/blogs/tout-savoir-sur-les-loutres/photo-bebe-loutre")),
             color = "#d50404") +
  scale_color_manual(values = col_leg) +
  theme_minimal()

gg = ggplotly(gg, tooltip = "text") %>%
  animation_opts(transition = 0, frame = 1000)

gg <- htmlwidgets::onRender(gg, "
     function(el, x) {
     el.on('plotly_click', function(d) {
     var url = d.points[0].customdata;
     //url
     window.open(url);
     });
     }
     ")
gg

```


### Valuebox

::: {.valuebox icon="flower3" color="#00BBC1"}
Nombre de jardins dans lesquels au moins un individu a Ã©tÃ© observÃ© :

`{r} nb_jardin_obs`
:::

# Migration {orientation="columns"}

## Column 1 {height="100%"}

### Row 1

:::: panel-tabset


#### Toutes les cartes

::: panel-tabset
```{r}
#| results: asis
#| fig-width: 6
#| fig-height: 4
for (year in sort(unique(df_sp$annee))) {
  df_carte_mois <- df_sp %>%
    filter(annee == year)
  
  cat(sprintf(paste0("\n\n### ", year,"\n\n")))
  
  vec_mois = c("01", "02", "03", "04", "05", "06", 
               "07", "08", "09", "10", "11", "12")
  if (year == as.numeric(strftime(Sys.Date(), "%Y")) ){
    vec_mois = vec_mois[1:as.numeric(max(strftime(df_carte_mois$date_collection, "%m")))]
  }
  
  for (mois in vec_mois) {
    gg = gg_carte_mois(month = mois, df_sp = df_carte_mois, france = france)
    print(gg)
  }
}
```
:::

::::

# Cartes  d'abondance {orientation="columns"}

## Par annÃ©es + valuebox {height="100%"}

### Cartes par annÃ©es

:::: panel-tabset

#### Abondance totale

::: panel-tabset
```{r}
#| results: asis
#| fig-width: 6
#| fig-height: 4
for(an in sort(unique(df_all_sp$annee))) {
  cat(sprintf("\n\n## %d\n\n", an))
  
  df_dep_an = df_dep_y %>%
    filter(annee == an) 
  
  codes = reg_dep$code_departement[which(!(reg_dep$code_departement %in% df_dep_an$dept_code))]
  df_vide = data.frame(dept_code = codes, annee = an, n = 0, cl_ab = "0")
  df_dep_an = df_dep_an %>% bind_rows(df_vide) %>%
    filter(str_length(dept_code) == 2) %>%
    arrange(dept_code)
  df_dep_an = df_dep_an[c(1:6, 29:30, 7:28, 31:96),]

  print(carte_ab(shape_map = france, fill_map = df_dep_an$cl_ab,
                 fill_color = couleurs, fill_cat = cat_carte,
                 fill_title = paste0("Abondance en ", an)))

}
```
:::

#### Abondance moyenne par jardin

::: panel-tabset
```{r}
#| results: asis
#| fig-width: 6
#| fig-height: 4
for(an in sort(unique(df_all_sp$annee))) {
  cat(sprintf("\n\n## %d\n\n", an))
  
  df_dep_an = df_dep_y %>%
    filter(annee == an) 
  
  codes = reg_dep$code_departement[which(!(reg_dep$code_departement %in% df_dep_an$dept_code))]
  df_vide = data.frame(dept_code = codes, annee = an, n = 0, cl_ab = "0")
  df_dep_an = df_dep_an %>% bind_rows(df_vide) %>%
    filter(str_length(dept_code) == 2) %>%
    arrange(dept_code)
  df_dep_an = df_dep_an[c(1:6, 29:30, 7:28, 31:96),]

  print(carte_ab(shape_map = france, fill_map = df_dep_an$cl_moy,
                 fill_color = couleurs, fill_cat = cat_carte_moy,
                 fill_title = paste0("Abondance en ", an)))

}
```
:::
::::

### Valuebox

::: {.valuebox icon="bug" color="#fc5050"}
Abondance maximale :

`{r} nb_max_ab$sum_ab` individus en `{r} nb_max_ab$annee` en `{r} nb_max_ab$nom_departement` (`{r} nb_max_ab$nom_region`)
:::

## Carte d'abondance totale depuis 2019 {height="50%"}

:::panel-tabset

### Totale

```{r}
carte_ab(shape_map = france, fill_map = df_dep$cl_ab, fill_color = couleurs,
         fill_cat = cat_carte_all, fill_title = "Abondance entre 2019 et 2024")
```

### Relative

```{r}
carte_ab(shape_map = france, fill_map = df_dep$cl_moy, fill_color = couleurs,
         fill_cat = cat_carte_all_moy, fill_title = "Abondance relative entre 2019 et 2024")
```

:::

# Co-occurence {orientation="columns"}

## Heatmap

```{r}
ggplot(reshape2::melt(df_heatmap), aes(x = Var1, y = Var2, fill = value)) +
  geom_tile(color = "white") +
  theme(axis.title.x = element_blank(),
        axis.title.y = element_blank(),
  #       axis.text.x = element_text(size = 8, angle = 90, vjust = 0.4, hjust = 1),
  #       axis.text.y = element_text(size = 8)) +
  # scale_fill_gradient2(low = "white", mid = "#ef5a58") +
        axis.text.x = element_text(size = 8, angle = 90, vjust = 0.4, hjust = 1, colour = "#0ba208"),
        axis.text.y = element_text(size = 8, color = "#2a7cf3")) +
  scale_fill_gradient2(low = "white", mid = "#ef5a58", high = "#005be0", midpoint = 0.5) +
  coord_fixed()
```

FrÃ©quence d'observation de l'<span style="color:#2a7cf3">espÃ¨ce 2</span> au mÃªme moment que l'<span style="color:#0ba208">espÃ¨ce 1</span> parmi toutes les observations de l'<span style="color:#0ba208">espÃ¨ce 1</span>

\begin{equation}
\frac{Observations_{\textcolor{#0ba208}{espece 1}\textcolor{#2a7cf3}{espece 2}}}{Observations_{\textcolor{#0ba208}{espece 1}}}
\end{equation}

## Tableau

```{r}

df_tab %>%
  ggplot() +
   geom_bar(aes(x = reorder(nom, -corr), y = corr, fill = CorrÃ©lation), stat = "identity") +
   scale_fill_manual(breaks = df_tab$CorrÃ©lation,
                     values = df_tab$couleur) +
   geom_hline(yintercept = 30, color = "red") +
   scale_x_discrete(limits=rev) +
   coord_flip() +
   theme_minimal_vgrid() +
   theme(axis.text.y = element_text(size = 7)) +
   ylab("% de co-occurence") +
   xlab("Nom de l'espÃ¨ce")
```

# PhÃ©nologies conjointes

::: panel-tabset
## Abondance

```{r}
#| results: asis
#| fig-width: 6
#| fig-height: 4

plot_e1 <- df_coocc %>%
    e_charts(an_sem) %>%       # axe x pour echarts
    e_line(sum_ab, symbol = "none")             # type de reprÃ©sentation pour l'axe y

plot_e2 <- df_coocc %>%
    e_charts(an_sem) %>%       # axe x pour echarts
    e_line(sum_ab_norm, symbol = "none")             # type de reprÃ©sentation pour l'axe y

aes_echarts(plot_e = plot_e1, xlab = "Semaine de collection",
            ylab = "Abondance",
            title = "Abondance par semaine selon les annÃ©es",
            line_color = sp_colors,
            one_y = FALSE)
```

## Indice d'activitÃ©

```{r}
aes_echarts(plot_e = plot_e2, xlab = "Semaine de collection",
            ylab = "Indice norm",
            title = "Indice norm par semaine selon les annÃ©es",
            line_color = sp_colors,
            one_y = FALSE)
```
:::

## DÃ©tails sur les indicateurs

Abondance totale : nombre total d'individus observÃ©s par semaine

Indice d'activitÃ© : observations d'une espÃ¨ce par semaine / observations totale de l'espÃ¨ce depuis 2019

# Tests

:::::panel-tabset

##### Ab/obs

::::panel-tabset

#### Abondance

:::panel-tabset

### No div

```{r}
df_ab_tot = df_all_sp %>%
  mutate(date = as.Date(date_collection)) %>%
  group_by(date) %>%
  summarise(n = sum(abondance)) %>%
  arrange(date)

div_obs = max((df_sp %>% group_by(an_sem) %>% summarise(n = sum(abondance)))$n) /
  max(df_ab_tot$n)

histo_line(df_histo = df_sp %>% 
             mutate(date = as.Date(date_collection)) %>%
             group_by(date) %>%
             summarise(sum_ab = sum(abondance)),
           df_ligne = df_ab_tot, div = 1, ytxtsec = "Abondance totale")
```

### div

```{r}
histo_line(df_histo = df_sp %>% 
             mutate(date = as.Date(date_collection)) %>%
             group_by(date) %>%
             summarise(sum_ab = sum(abondance)),
           df_ligne = df_ab_tot, div = div_obs, ytxtsec = "Abondance totale")
```

:::

#### Observations

:::panel-tabset

### No div

```{r}
div_obs = max((df_sp %>% filter(abondance != 0) %>% group_by(an_sem) %>% summarise(n = n()))$n) /
  max(df_nb_obs_date$n)

histo_line(df_histo = df_sp %>% 
             filter(abondance != 0) %>%
             mutate(date = as.Date(date_collection)) %>%
             group_by(date) %>%
             summarise(sum_ab = n()),
           df_ligne = df_nb_obs_date, div = 1, ytxtsec = "Nombre de sessions d'observations",
           ytxt = "Nombre d'observations de l'espÃ¨ce")
```

### div

```{r}
histo_line(df_histo = df_sp %>% 
             filter(abondance != 0) %>%
             mutate(date = as.Date(date_collection)) %>%
             group_by(date) %>%
             summarise(sum_ab = n()),
           df_ligne = df_nb_obs_date, div = div_obs, ytxtsec = "Nombre de sessions d'observations",
           ytxt = "Nombre d'observations de l'espÃ¨ce")
```

:::

::::

##### Grega

```{r}
a = df_sp %>%
  group_by(jardin_id) %>%
  summarise(n = n()) %>%
  filter(n > 5)

df_test_grega = df_all_sp %>%
  filter(jardin_id %in% a$jardin_id, abondance != 0) %>%
  mutate(abondance2 = if_else(abondance > 10, 10, abondance)) %>%
  select(nom_espece, abondance, abondance2)

ggplot(df_test_grega, aes(x = nom_espece, y = abondance2)) +
  geom_boxplot() +
  coord_flip()

ggplot((df_test_grega %>%filter(nom_espece == sp_name) %>% as.data.frame()),
       aes(x = nom_espece, y = abondance2)) +
  geom_boxplot() +
  coord_flip()
```

:::::

# Histo test

```{r}
df_histo_test2 = df_all_sp %>%
  filter(abondance!= 0) %>%
  group_by(nom_espece) %>%
  summarise(m_abn = mean(abondance), n = n()) %>%
  mutate(sd = 1.96*sqrt(m_abn/n)) %>%
  arrange(desc(m_abn)) %>%
  as.data.frame()

```

```{r}
ggplot(df_histo_test2, aes(x = reorder(nom_espece, m_abn))) +
  geom_bar(aes(weight = m_abn), fill = "#ffae57") +
  geom_errorbar( aes(x=nom_espece, ymin=m_abn-sd, ymax=m_abn+sd),
                 width=0.4, colour="#bb680e", alpha=0.9, size=1.3) +
  coord_flip() +
  ylab("EspÃ¨ce") +
  xlab("Nombre d'individus")
```

```{r}
df_histo_test = df_all_sp %>%
  filter(abondance!= 0) %>%
  mutate(ab_grega = factor(case_when(abondance == 1 ~ "1",
                                     abondance <= 4 ~ "2 Ã  4",
                                     abondance <= 9 ~ "5 Ã  9",
                                     abondance > 9 ~ "+ de 10"),
                           levels = c("1", "2 Ã  4", "5 Ã  9", "+ de 10"))) %>%
  group_by(nom_espece, ab_grega) %>%
  summarise(n = n()) %>%
  group_by(nom_espece) %>%
  mutate(sum_n = sum(n)) %>%
  ungroup() %>%
  mutate(prop_grega = n/sum_n) %>%
  full_join(df_histo_test2 %>% select(nom_espece, m_abn), by = c("nom_espece" = "nom_espece"))

```

```{r}
ggplot(df_histo_test, aes(x = reorder(nom_espece, m_abn), fill = ab_grega)) +
  geom_bar(aes(weight = prop_grega)) +
  coord_flip() +
  ylab("EspÃ¨ce") +
  xlab("Proportion")
```

