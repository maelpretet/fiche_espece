---
params:
  sp_name: "Amaryllis"
title: "Fiche esp√®ce"
format:
  dashboard:
    scrolling: false
    nav-buttons:
      - icon: github
        href: https://github.com/maelpretet/fiche_espece
      - icon: arrow-bar-left
        href: ../programs/accueil.html
    embed-resources: true
execute:
  echo: false
  message : false
  warning : false
  error : false
---

```{r}
# Variables constantes
sp_name = params$sp_name
year_colors = c("#eb6ecf", "#8a6eeb", "#6e9deb", "#6eebb4", "#ebbc6e",
                "#eb816e", "#d01456", "#783628", "#0b15de", "#4fdce0")
sp_colors = c("#f00000", "#4bdadc", "#31c1f3", "#14779a", "#003ca4", "#0c1eff")
color_flag = "red"
#liste principale des papillons de l'observatoire
liste_principale <- c("Machaons","Flamb√©s", "Demi-deuils",
                      "Paon du jour", "Vulcain", "Belle-dame", "Petites tortues",
                      "Robert-le-diable", "Tabac d'Espagne", "Sil√®ne", "Sylvains",
                      "Souci", "Aurores", "Pi√©rides blanches","Gaz√©","Citrons","Amaryllis",
                      "Myrtil", "Procris", "M√©g√®res", "Tircis", "Lyc√®nes bleus",
                      "Argus verts", "Brun des p√©largoniums", "Cuivr√©", "Hesp√©rides tachet√©es",
                      "Hesp√©rides orang√©es", "Moro-sphinx")
# D√©partements avec num√©ro et r√©gion
reg_dep = read.csv2("data/departements-france.csv", sep=",")
```

# `{r} params$sp_name` {orientation="columns"}

```{r}
# Librairies
library(cowplot)
library(dplyr)
library(echarts4r)
library(ggplot2)
library(here)
library(igraph)
library(knitr)
library(magick)
library(plotly)
library(RColorBrewer)
library(rlang)
library(RMySQL)
library(scales)
library(stringr)
library(tibble)
library(tidyr)
```

```{r}
# Fonctions et environnement
readRenviron(".env")
source("fonctions/carte.R")
source("fonctions/function_graphics.R")
source("fonctions/function_import_from_mosaic.R")
# Cr√©ation des data frame
source("fonctions/create_df_all_sp.R")
source("fonctions/create_df.R")
```

## Row 1

::: {.valuebox icon="database" color="#52ad6b"}
Donn√©es cumul√©es depuis 2019 ü¶ã
:::


```{r}
file_img = paste0("data/img/logo_obj_ope_papillons.png")
image_read(file_img)
```

## Photo

```{r}
file_img = paste0("data/photos/", sp_name, ".jpg")
image_read(file_img)
```

# Par ann√©es

## Valuebox

::: {.valuebox icon="eye" color="#ced600"}
Nombre de fois o√π au moins un individu a √©t√© observ√© :

`{r} nb_obs_idv`
:::

::: {.valuebox icon="eye-fill" color="#5bbdd6"}
Nombre total d'individus observ√©s :

`{r} nb_idv_cpt`
:::

## Graphiques

### Abondance totale {.tabset}

```{r}
#| title: Semaine

div_obs = max((df_sp %>% group_by(an_sem) %>% summarise(n = sum(abondance)))$n) /
  max(df_nb_obs_date$n)

histo_line(df_histo = df_sp %>% 
             mutate(date = as.Date(date_collection)) %>%
             group_by(date) %>%
             summarise(sum_ab = sum(abondance)),
           df_ligne = df_nb_obs_date, div = div_obs)
```

```{r}
#| title: Mois

div_obs = max((df_sp %>%
                 mutate(date_mois = strftime(as.Date(date_collection), "%G-%m")) %>%
                 group_by(date_mois) %>%
                 summarise(n = sum(abondance)))$n) /
  max(df_nb_obs_mois$n)

histo_line(df_histo = df_sp %>%
             mutate(date_mois = strftime(as.Date(date_collection), "%G-%m")) %>%
             group_by(date_mois) %>% summarise(sum_ab = sum(abondance)) %>%
             mutate(date_mois = as.Date(paste0(date_mois, "-01"))),
           x_h = "date_mois", x_l = "date_mois",
           df_ligne = df_nb_obs_mois, div = div_obs)
```

### Indicateurs relatifs {.tabset}

```{r}
#| title: Abondance relative

aes_echarts(plot_e = df_ab_rel %>%
              e_charts(num_semaine) %>%
              e_line(sum_ab_rel, symbol='none'),
            xlab = "Semaine de collection",
            ylab = "Indice d'abondance",
            title = "Indice d'abondance par semaine selon les ann√©es",
            line_color = year_colors)
```

```{r}
#| title: Fr√©quence relative

aes_echarts(plot_e = df_freq_rel %>%
              e_charts(num_semaine) %>%
              e_line(freq_rel, symbol='none'),
            xlab = "Semaine de collection",
            ylab = "Fr√©quence relative",
            title = "Fr√©quence relative par semaine selon les ann√©es",
            line_color = year_colors)
```

```{r}
#| title: Slider

# Graphique avec slider en ggplot
gg = df_ab_rel %>%
  ggplot() +
    geom_smooth(aes(x=num_semaine, y = sum_ab, frame = annee),
              color = 'purple', method = "gam") +
    xlab("Semaine de collection") +
    ylab("Abondance totale") +
    theme_cowplot()
  
ggplotly(gg) %>%
  animation_opts(transition = 0)
```

# R√©partition {orientation="columns"}

```{r}
gg = df_repartition %>%
  ggplot() +
    geom_bar(mapping = aes(x = nom_espece, y = rel_ab, fill = nom_espece,
                           text = paste0(nom_espece, " : ",
                                         scales::percent(rel_ab, accuracy = 0.01))),
             stat = "identity") +
    scale_x_discrete(limits=df_repartition$nom_espece) +
    ylab("% d'abondance") +
    theme_cowplot() +
    theme(axis.title.y = element_blank(),
          legend.position = "none" ) +
    scale_fill_manual(breaks = df_repartition$nom_espece,
                      values = df_repartition$couleur) +
    scale_y_continuous(labels = scales::percent_format(accuracy = 1)) + 
  coord_flip()

ggplotly(gg, tooltip = "text")
```



```{r}
ggplot(df_gregarite) +
    geom_bar(aes(x = class_idv, y = freq_prc),
             stat = "identity",
             fill = "#8cb6ec") +
  scale_x_discrete(limits=c("1", "2 √† 4", "5 √† 9", "10 et +")) +
  theme_cowplot() + 
  labs(x = "Nombre d'individus observ√©s simultan√©ment",
       y = "% d'observations") +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1))

```

# Jardins {orientation="columns"}

## Types de jardin

### Boxplot

::: panel-tabset
```{r}
#| results: asis
#| fig-width: 6
#| fig-height: 4
for(i in 1:3) {
  cat(sprintf(paste0("\n\n#### ",lst_param[[i]][[4]],"\n\n")))
  
  print(df_sp %>%
    filter(abondance != 0) %>%
    ggplot() +
    geom_boxplot(aes(x = distance_prairie, y = abondance), color = lst_param[[i]][[2]]) +
    scale_x_discrete(limits=cat_jard) +
    xlab(lst_param[[i]][[3]]) +
    ylab("Abondance\n(jardins avec esp√®ce observ√©e)") +
    theme_cowplot())

}
```
:::

### Histogramme

::: panel-tabset
```{r}
#| results: asis
#| fig-width: 6
#| fig-height: 4
for(i in 1:3) {
  cat(sprintf(paste0("\n\n#### ",lst_param[[i]][[4]],"\n\n")))
  
  df_tot = df_sp %>%
    group_by(!!sym(lst_param[[i]][[1]])) %>%
    summarise(ntot = n()) %>%
    as.data.frame()
  
  df_obs = df_sp %>%
    filter(abondance != 0) %>%
    group_by(!!sym(lst_param[[i]][[1]])) %>%
    summarise(nobs = n()) %>%
    as.data.frame()
  
  if (length(setdiff(df_tot[,lst_param[[i]][[1]]],
                     df_obs[,lst_param[[i]][[1]]] )) != 0) {
    df_add = data.frame(distance = setdiff(df_tot[,lst_param[[i]][[1]]],
                                           df_obs[,lst_param[[i]][[1]]] ),
                        nobs = 0)
    names(df_add)[1] = lst_param[[i]][[1]]
    df_obs = rbind(df_obs, df_add)
  }
  
  df_obs = df_obs %>%
      mutate(nperc = nobs/df_tot$ntot) %>%
      as.data.frame()
  
  print(df_obs %>%
    ggplot() +
      geom_bar(aes(x = !!sym(lst_param[[i]][[1]]), y = nperc,
                   fill = !!sym(lst_param[[i]][[1]]) ),
               stat = 'identity', show.legend = FALSE) +
      scale_x_discrete(limits=cat_jard) +
      scale_fill_manual(values = lst_param[[i]][[2]], breaks = cat_jard)+
      scale_y_continuous(labels = scales::percent_format(accuracy = 0.1)) +
      xlab(lst_param[[i]][[3]]) +
      ylab(paste0("% d'observations de l'individu/\n",
                  "dans la cat√©gorie de lieu")) +
      theme_cowplot())
  
}
```
:::

## Carte + valuebox

### Cartes des jardins {.tabset}

```{r}
#| title: Position des jardins

ggplot(france) + 
    geom_sf(fill = "#f4f4f4") +
    geom_point(data = df_jardin_point, aes(x = longitude, y = latitude, color=Pr√©sence)) +
    theme_light() 

```

```{r}
#| title: Slider_2023
df_mois = data.frame(mois = c("01", "02", "03", "04", "05", "06",
                              "07", "08", "09", "10", "11", "12"),
                     jardin_id = 0,
                     latitude = NA,
                     longitude = NA,
                     sum_ab = 0)
df_migration = df_sp %>%
  filter(annee == 2023) %>%
  mutate(mois = strftime(date_collection, "%m")) %>%
  group_by(mois, jardin_id, latitude, longitude) %>%
  summarise(sum_ab = sum(abondance)) %>%
  filter(sum_ab != 0) %>%
  dplyr::union(df_mois)

gg =ggplot(france) +
  geom_sf(fill = "#f0f0f0", color = "#a0a0a0") +
  geom_point(data = df_migration, aes(x = longitude, y=latitude, frame = mois), color = "red") +
  theme_minimal()

gg %>%
  ggplotly()  %>%
  animation_opts(transition = 0, frame = 1000)
```

### Valuebox

::: {.valuebox icon="flower3" color="#00BBC1"}
Nombre de jardins dans lesquels au moins un individu a √©t√© observ√© :

`{r} nb_jardin_obs`
:::

# Migration {orientation="columns"}

## Column 1 {height="100%"}

### Row 1

:::: panel-tabset

#### Bidule

::: panel-tabset
### 2020

```{r}
gg_carte(an = 2020, df_sp = df_sp, france = france)
```

### 2021

```{r}
gg_carte(an = 2021, df_sp = df_sp, france = france)
```

### 2022

```{r}
gg_carte(an = 2022, df_sp = df_sp, france = france)
```
:::

#### Gif

::: panel-tabset

```{r chunk-label, fig.show='animate', ffmpeg.format='gif', dev='jpeg'}
for (year in sort(unique(df_sp$annee))) {
  df_carte_mois <- df_sp %>%
    filter(annee == year)

  cat(sprintf(paste0("\n\n### ", year,"\n\n")))

  vec_mois = c("01", "02", "03", "04", "05", "06",
               "07", "08", "09", "10", "11", "12")
  if (year == as.numeric(strftime(Sys.Date(), "%Y")) ){
    vec_mois = vec_mois[1:as.numeric(max(strftime(df_carte_mois$date_collection, "%m")))]
  }

  for (mois in vec_mois) {
    gg = gg_carte_mois(month = mois, df_sp = df_carte_mois, france = france)
    ggsave(filename = paste0("gif/",year, mois,"carte.png"), plot = gg, width=2.5, height=2.5)
  }

  imgs <- list.files("gif/", full.names = TRUE)
  img_list <- lapply(imgs, image_read)
  img_joined <- image_join(img_list) ## Jonction des images
  img_animated <- image_animate(img_joined, fps = 2.5) ## Animation (2 frames par seconde)
  print(img_animated) ## Afficher le gif
  image_write(image = img_animated,
            path = paste0("out/gif/", year, ".gif"))
  file.remove(imgs) ## Suppression des images dans le dossier
}
# print(plot(x = c(1,2,3), y = c(20,50,32)))
# a = 1
# print(a)
```
:::

Test de texte

#### Toutes les cartes

::: panel-tabset
```{r}
#| results: asis
#| fig-width: 6
#| fig-height: 4
for (year in sort(unique(df_sp$annee))) {
  df_carte_mois <- df_sp %>%
    filter(annee == year)
  
  cat(sprintf(paste0("\n\n### ", year,"\n\n")))
  
  vec_mois = c("01", "02", "03", "04", "05", "06", 
               "07", "08", "09", "10", "11", "12")
  if (year == as.numeric(strftime(Sys.Date(), "%Y")) ){
    vec_mois = vec_mois[1:as.numeric(max(strftime(df_carte_mois$date_collection, "%m")))]
  }
  
  for (mois in vec_mois) {
    gg = gg_carte_mois(month = mois, df_sp = df_carte_mois, france = france)
    print(gg)
  }
}
```
:::

::::

# Cartes  d'abondance {orientation="columns"}

## Par ann√©es + valuebox {height="100%"}

### Cartes par ann√©es

:::: panel-tabset

#### Abondance totale

::: panel-tabset
```{r}
#| results: asis
#| fig-width: 6
#| fig-height: 4
for(an in sort(unique(df_all_sp$annee))) {
  cat(sprintf("\n\n## %d\n\n", an))
  
  df_dep_an = df_dep_y %>%
    filter(annee == an) 
  
  codes = reg_dep$code_departement[which(!(reg_dep$code_departement %in% df_dep_an$dept_code))]
  df_vide = data.frame(dept_code = codes, annee = an, n = 0, cl_ab = "0")
  df_dep_an = df_dep_an %>% bind_rows(df_vide) %>%
    filter(str_length(dept_code) == 2) %>%
    arrange(dept_code)
  df_dep_an = df_dep_an[c(1:6, 29:30, 7:28, 31:96),]

  print(carte_ab(shape_map = france, fill_map = df_dep_an$cl_ab,
                 fill_color = couleurs, fill_cat = cat_carte,
                 fill_title = paste0("Abondance en ", an)))

}
```
:::

#### Abondance moyenne par jardin

::: panel-tabset
```{r}
#| results: asis
#| fig-width: 6
#| fig-height: 4
for(an in sort(unique(df_all_sp$annee))) {
  cat(sprintf("\n\n## %d\n\n", an))
  
  df_dep_an = df_dep_y %>%
    filter(annee == an) 
  
  codes = reg_dep$code_departement[which(!(reg_dep$code_departement %in% df_dep_an$dept_code))]
  df_vide = data.frame(dept_code = codes, annee = an, n = 0, cl_ab = "0")
  df_dep_an = df_dep_an %>% bind_rows(df_vide) %>%
    filter(str_length(dept_code) == 2) %>%
    arrange(dept_code)
  df_dep_an = df_dep_an[c(1:6, 29:30, 7:28, 31:96),]

  print(carte_ab(shape_map = france, fill_map = df_dep_an$cl_moy,
                 fill_color = couleurs, fill_cat = cat_carte_moy,
                 fill_title = paste0("Abondance en ", an)))

}
```
:::
::::

### Valuebox

::: {.valuebox icon="bug" color="#fc5050"}
Abondance maximale :

`{r} nb_max_ab$sum_ab` individus en `{r} nb_max_ab$annee` en `{r} nb_max_ab$nom_departement` (`{r} nb_max_ab$nom_region`)
:::

## Carte d'abondance totale depuis 2019 {height="50%"}

```{r}
carte_ab(shape_map = france, fill_map = df_dep$cl_ab, fill_color = couleurs,
         fill_cat = cat_carte_all, fill_title = "Abondance entre 2019 et 2024")
```

# Co-occurence

## Graphes

::: panel-tabset
```{r}
mygraph <- graph_from_data_frame(test_hierarchy, vertices=test_vertices )

E(mygraph)$color = test_hierarchy$seuil
E(mygraph)$weight = test_hierarchy$value/10
V(mygraph)$label.cex = 0.5

# With igraph: 
# plot(mygraph, edge.arrow.size=0, vertex.size=2)

```

### 1

```{r}
plot(mygraph, edge.arrow.size=0, vertex.size=2, layout=layout.circle, vertex.label.dist=0.5)
```

### 2

```{r}
plot(mygraph, edge.arrow.size=0, vertex.size=2, layout=layout.circle, label.y = 90, vertex.label.dist=0.5,edge.width=E(mygraph)$weight)
```
:::

```{r}

df_tab %>%
  ggplot() +
   geom_bar(aes(x = reorder(nom, -corr), y = corr, fill = Corr√©lation), stat = "identity") +
   scale_fill_manual(breaks = df_tab$Corr√©lation,
                     values = df_tab$couleur) +
   geom_hline(yintercept = 30, color = "red") +
   scale_x_discrete(limits=rev) +
   coord_flip() +
   theme_minimal_vgrid() +
   theme(axis.text.y = element_text(size = 7)) +
   ylab("% de co-occurence") +
   xlab("Nom de l'esp√®ce")
```

# Ph√©nologies conjointes

::: panel-tabset
## Abondance

```{r}
#| results: asis
#| fig-width: 6
#| fig-height: 4

plot_e1 <- df_coocc %>%
    e_charts(an_sem) %>%       # axe x pour echarts
    e_line(sum_ab, symbol = "none")             # type de repr√©sentation pour l'axe y

plot_e2 <- df_coocc %>%
    e_charts(an_sem) %>%       # axe x pour echarts
    e_line(sum_ab_norm, symbol = "none")             # type de repr√©sentation pour l'axe y

aes_echarts(plot_e = plot_e1, xlab = "Semaine de collection",
            ylab = "Abondance",
            title = "Abondance par semaine selon les ann√©es",
            line_color = sp_colors)
```

## Indice d'activit√©

```{r}
aes_echarts(plot_e = plot_e2, xlab = "Semaine de collection",
            ylab = "Indice norm",
            title = "Indice norm par semaine selon les ann√©es",
            line_color = sp_colors)
```
:::

## D√©tails sur les indicateurs

Abondance totale : nombre total d'individus observ√©s par semaine

Indice d'activit√© : observations d'une esp√®ce par semaine / observations totale de l'esp√®ce depuis 2019
